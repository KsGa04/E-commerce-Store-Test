#!/usr/bin/env python3
import subprocess
import sys
import os
import shutil

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å –∫ Allure
ALLURE_PATH = r"C:\allure\allure-2.35.1\bin\allure.bat"


def check_allure_installed():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Allure"""
    if os.path.exists(ALLURE_PATH):
        try:
            result = subprocess.run([ALLURE_PATH, "--version"], capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ Allure –Ω–∞–π–¥–µ–Ω: {ALLURE_PATH}")
                print(f"‚úÖ –í–µ—Ä—Å–∏—è: {result.stdout.strip()}")
                return ALLURE_PATH
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Allure: {e}")

    print("‚ùå Allure –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print(f"   –û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å: {ALLURE_PATH}")
    return None


def run_tests():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏"""

    # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ç–µ—Å—Ç–∞–º–∏
    current_dir = os.path.dirname(__file__)
    tests_dir = os.path.join(current_dir, "tests")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    project_root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
    allure_results_dir = os.path.join(project_root, "reports", "allure-results")
    allure_report_dir = os.path.join(project_root, "reports", "allure-report")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Allure
    allure_path = check_allure_installed()
    allure_installed = allure_path is not None

    commands = [
        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        ["pytest", tests_dir, "-v"],

        # –ó–∞–ø—É—Å–∫ smoke —Ç–µ—Å—Ç–æ–≤
        ["pytest", tests_dir, "-m", "smoke", "-v"],

        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ª–æ–≥–∏–Ω–∞
        ["pytest", tests_dir, "-m", "login", "-v"],

        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∞–¥–º–∏–Ω–∫–∏
        ["pytest", tests_dir, "-m", "admin", "-v"],

        # –ó–∞–ø—É—Å–∫ regression —Ç–µ—Å—Ç–æ–≤
        ["pytest", tests_dir, "-m", "regression", "-v"],

        # –ó–∞–ø—É—Å–∫ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π Allure –æ—Ç—á–µ—Ç–æ–≤
        ["pytest", tests_dir, "-v", "--alluredir", allure_results_dir, "--clean-alluredir"],

        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        ["pytest", tests_dir, "-n", "auto", "-v", "--alluredir", allure_results_dir],
    ]

    print("=" * 60)
    print("üöÄ –°–ò–°–¢–ï–ú–ê –ó–ê–ü–£–°–ö–ê –¢–ï–°–¢–û–í")
    print("=" * 60)

    if allure_installed:
        print("‚úÖ Allure –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        print("‚ö†Ô∏è  Allure –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –û—Ç—á–µ—Ç—ã –±—É–¥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –±–µ–∑ Allure.")
    print("=" * 60)

    print("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∑–∞–ø—É—Å–∫–∞:")
    print("1 - üîÑ –í—Å–µ —Ç–µ—Å—Ç—ã")
    print("2 - üî• Smoke —Ç–µ—Å—Ç—ã (–æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)")
    print("3 - üîê –¢–µ—Å—Ç—ã –ª–æ–≥–∏–Ω–∞")
    print("4 - ‚öôÔ∏è  –¢–µ—Å—Ç—ã –∞–¥–º–∏–Ω–∫–∏")
    print("5 - üìä Regression —Ç–µ—Å—Ç—ã")
    print("6 - üìà –ó–∞–ø—É—Å–∫ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π Allure –æ—Ç—á–µ—Ç–æ–≤")
    print("7 - ‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤")
    print("8 - üéØ –¢–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è Allure –æ—Ç—á–µ—Ç–∞")
    print("=" * 60)

    choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-8): ").strip()

    if choice in ["1", "2", "3", "4", "5"]:
        command_index = int(choice) - 1
        command = commands[command_index]

        # –î–æ–±–∞–≤–ª—è–µ–º Allure –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if allure_installed:
            command.extend(["--alluredir", allure_results_dir])

        print(f"üîÑ –ó–∞–ø—É—Å–∫: {' '.join(command)}")
        print("=" * 60)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        os.chdir(current_dir)

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
        os.makedirs(allure_results_dir, exist_ok=True)
        os.makedirs(allure_report_dir, exist_ok=True)

        result = subprocess.run(command)

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if allure_installed and result.returncode in [0, 1]:
            open_report = input("\nüìä –•–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å Allure –æ—Ç—á–µ—Ç? (y/n): ").strip().lower()
            if open_report == 'y':
                generate_and_open_report(allure_path, allure_results_dir, allure_report_dir)
        elif not allure_installed:
            print("\nüìä Allure –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û—Ç—á–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.")

        sys.exit(result.returncode)

    elif choice == "6":
        if not allure_installed:
            print("‚ùå Allure –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Allure.")
            sys.exit(1)

        command = commands[5]  # –ó–∞–ø—É—Å–∫ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π Allure
        print(f"üîÑ –ó–∞–ø—É—Å–∫: {' '.join(command)}")
        print("=" * 60)

        os.chdir(current_dir)
        os.makedirs(allure_results_dir, exist_ok=True)
        os.makedirs(allure_report_dir, exist_ok=True)

        result = subprocess.run(command)

        if result.returncode in [0, 1]:
            open_report = input("\nüìä –•–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å Allure –æ—Ç—á–µ—Ç? (y/n): ").strip().lower()
            if open_report == 'y':
                generate_and_open_report(allure_path, allure_results_dir, allure_report_dir)

        sys.exit(result.returncode)

    elif choice == "7":
        command = commands[6]  # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫

        print(f"üîÑ –ó–∞–ø—É—Å–∫: {' '.join(command)}")
        print("=" * 60)

        os.chdir(current_dir)
        os.makedirs(allure_results_dir, exist_ok=True)
        os.makedirs(allure_report_dir, exist_ok=True)

        result = subprocess.run(command)

        if allure_installed and result.returncode in [0, 1]:
            open_report = input("\nüìä –•–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å Allure –æ—Ç—á–µ—Ç? (y/n): ").strip().lower()
            if open_report == 'y':
                generate_and_open_report(allure_path, allure_results_dir, allure_report_dir)
        elif not allure_installed:
            print("\nüìä Allure –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û—Ç—á–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.")

        sys.exit(result.returncode)

    elif choice == "8":
        if not allure_installed:
            print("‚ùå Allure –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Allure.")
            sys.exit(1)

        print("üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Allure –æ—Ç—á–µ—Ç–∞ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        generate_and_open_report(allure_path, allure_results_dir, allure_report_dir)

    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        sys.exit(1)


def generate_and_open_report(allure_path, results_dir, report_dir):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ Allure –æ—Ç—á–µ—Ç–∞"""
    print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Allure –æ—Ç—á–µ—Ç–∞...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
    if not os.path.exists(results_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {results_dir}")
        print("   –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã —Å –æ–ø—Ü–∏–µ–π Allure")
        return

    if not os.listdir(results_dir):
        print(f"‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {results_dir}")
        print("   –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã —Å –æ–ø—Ü–∏–µ–π Allure")
        return

    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤: {results_dir}")
    print(f"üìÅ –ë—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {report_dir}")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    generate_cmd = [
        allure_path, "generate",
        results_dir,
        "-o", report_dir,
        "--clean"
    ]

    print(f"üîß –ö–æ–º–∞–Ω–¥–∞: {' '.join(generate_cmd)}")

    result = subprocess.run(generate_cmd)

    if result.returncode == 0:
        print("‚úÖ Allure –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç
        print("üåê –û—Ç–∫—Ä—ã—Ç–∏–µ Allure –æ—Ç—á–µ—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ...")
        open_cmd = [allure_path, "open", report_dir]
        subprocess.run(open_cmd)
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Allure –æ—Ç—á–µ—Ç–∞")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é:")
        print(f'"{allure_path}" generate "{results_dir}" -o "{report_dir}" --clean')
        sys.exit(1)


if __name__ == "__main__":
    run_tests()