name: CI - Tests & Coverage (Python 3.12)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Show Python info
        run: |
          python --version
          which python || true
          python -c "import sys, platform; print('executable=', sys.executable); print('sys.path sample=', sys.path[:4]); print('platform=', platform.platform())"

      - name: Upgrade pip & tools
        run: |
          python -m pip install --upgrade pip setuptools wheel

      - name: Install Python dependencies (if exists)
        run: |
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          else
            echo "requirements.txt not found — skipping"
          fi
          pip install pytest coverage || true

      - name: Try editable install (pip install -e .) when packaging files exist
        id: install-editable
        run: |
          if [ -f "pyproject.toml" ] || [ -f "setup.py" ] || [ -f "setup.cfg" ]; then
            echo "Found package metadata, attempting pip install -e ."
            pip install -e . || echo "editable install failed"
            echo "installed_editable=true" >> $GITHUB_OUTPUT
          else
            echo "installed_editable=false" >> $GITHUB_OUTPUT
          fi

      - name: Add ./src to PYTHONPATH fallback
        if: steps.install-editable.outputs.installed_editable == 'false'
        run: |
          if [ -d "src" ]; then
            echo "Adding ./src to PYTHONPATH"
            echo "PYTHONPATH=$PWD/src" >> $GITHUB_ENV
            python -c "import sys; print('Added src to sys.path sample:', sys.path[:3])"
          else
            echo "No src directory; ensure tests import path is correct"
          fi

      - name: Run pytest with coverage
        run: |
          mkdir -p reports
          coverage run -m pytest -q || true
          coverage xml -i -o coverage.xml || true
          coverage html -d htmlcov || true

      - name: Upload coverage HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov

      - name: Upload coverage XML
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml

      - name: Job summary
        if: always()
        run: |
          echo "## Test summary" >> $GITHUB_STEP_SUMMARY
          if [ -d "htmlcov" ]; then
            echo "- ✅ HTML coverage report available as artifact 'coverage-report'." >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⚠️ No HTML coverage generated." >> $GITHUB_STEP_SUMMARY
          fi
