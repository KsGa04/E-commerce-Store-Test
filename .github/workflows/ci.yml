name: CI Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-xdist allure-pytest

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install Playwright
      run: |
        npx playwright install
        npx playwright install-deps

    - name: Cache Playwright browsers
      uses: actions/cache@v3
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-playwright-

    - name: Run API tests
      run: |
        pytest tests/api/ -v --alluredir=reports/allure-results

    - name: Run UI tests
      run: |
        pytest tests/ui/ -v --alluredir=reports/allure-results
      env:
        HEADLESS: true

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          reports/allure-results/
          screenshots/
        retention-days: 7

  allure-report:
    runs-on: ubuntu-latest
    needs: test
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download test results
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Combine test results
      run: |
        mkdir -p combined-results
        find artifacts -name "*.json" -exec cp {} combined-results/ \;
        find artifacts -name "*.xml" -exec cp {} combined-results/ \;
        find artifacts -name "*.txt" -exec cp {} combined-results/ \;

    - name: Get Allure history
      uses: actions/checkout@v4
      if: always()
      continue-on-error: true
      with:
        ref: gh-pages
        path: gh-pages

    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Setup Allure
      run: |
        sudo wget https://github.com/allure-framework/allure2/releases/download/2.24.1/allure-2.24.1.tgz
        sudo tar -zxvf allure-2.24.1.tgz -C /opt/
        sudo ln -s /opt/allure-2.24.1/bin/allure /usr/bin/allure
        allure --version

    - name: Generate Allure report
      run: |
        allure generate artifacts/test-results-3.11/allure-results -o allure-report --clean
        cp -r gh-pages/allure-report/history allure-report/history || echo "No history found"

    - name: Deploy to GitHub Pages
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./allure-report
        publish_branch: gh-pages
        force_orphan: true

    - name: Upload Allure report
      uses: actions/upload-artifact@v3
      with:
        name: allure-report
        path: allure-report
        retention-days: 30

  test-summary:
    runs-on: ubuntu-latest
    needs: [test, allure-report]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download test results
      uses: actions/download-artifact@v3
      with:
        pattern: test-results-*
        path: artifacts

    - name: Generate test summary
      run: |
        echo "# Test Results Summary" > summary.md
        echo "" >> summary.md
        echo "## Test Run Information" >> summary.md
        echo "- **Workflow**: ${{ github.workflow }}" >> summary.md
        echo "- **Run ID**: ${{ github.run_id }}" >> summary.md
        echo "- **Commit**: ${{ github.sha }}" >> summary.md
        echo "- **Branch**: ${{ github.ref }}" >> summary.md
        echo "" >> summary.md
        
        # Count test files and results
        API_TESTS=$(find tests/api -name "test_*.py" | wc -l)
        UI_TESTS=$(find tests/ui -name "test_*.py" | wc -l)
        echo "## Test Statistics" >> summary.md
        echo "- **API Test Files**: $API_TESTS" >> summary.md
        echo "- **UI Test Files**: $UI_TESTS" >> summary.md
        echo "- **Total Test Files**: $((API_TESTS + UI_TESTS))" >> summary.md
        echo "" >> summary.md
        
        echo "## Allure Report" >> summary.md
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "ðŸ“Š **Live Report**: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" >> summary.md
        else
          echo "ðŸ“Š **Download Artifact**: allure-report" >> summary.md
        fi

    - name: Create summary comment
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('summary.md', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });